// Code generated by MockGen. DO NOT EDIT.
// Source: service/rates.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/majorchork/rates_app/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockExchangeRateService is a mock of ExchangeRateService interface.
type MockExchangeRateService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateServiceMockRecorder
}

// MockExchangeRateServiceMockRecorder is the mock recorder for MockExchangeRateService.
type MockExchangeRateServiceMockRecorder struct {
	mock *MockExchangeRateService
}

// NewMockExchangeRateService creates a new mock instance.
func NewMockExchangeRateService(ctrl *gomock.Controller) *MockExchangeRateService {
	mock := &MockExchangeRateService{ctrl: ctrl}
	mock.recorder = &MockExchangeRateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateService) EXPECT() *MockExchangeRateServiceMockRecorder {
	return m.recorder
}

// GetAnalyzedRates mocks base method.
func (m *MockExchangeRateService) GetAnalyzedRates() (models.ExchangeRatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzedRates")
	ret0, _ := ret[0].(models.ExchangeRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzedRates indicates an expected call of GetAnalyzedRates.
func (mr *MockExchangeRateServiceMockRecorder) GetAnalyzedRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzedRates", reflect.TypeOf((*MockExchangeRateService)(nil).GetAnalyzedRates))
}

// GetExchangeByDate mocks base method.
func (m *MockExchangeRateService) GetExchangeByDate(date time.Time) (models.ExchangeRatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeByDate", date)
	ret0, _ := ret[0].(models.ExchangeRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeByDate indicates an expected call of GetExchangeByDate.
func (mr *MockExchangeRateServiceMockRecorder) GetExchangeByDate(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeByDate", reflect.TypeOf((*MockExchangeRateService)(nil).GetExchangeByDate), date)
}

// GetLatestExchange mocks base method.
func (m *MockExchangeRateService) GetLatestExchange() (models.ExchangeRatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestExchange")
	ret0, _ := ret[0].(models.ExchangeRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestExchange indicates an expected call of GetLatestExchange.
func (mr *MockExchangeRateServiceMockRecorder) GetLatestExchange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestExchange", reflect.TypeOf((*MockExchangeRateService)(nil).GetLatestExchange))
}
